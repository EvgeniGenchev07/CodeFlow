

<PageTitle>Duels</PageTitle>
<main class="container">
    <section class="duels-header">
        <h2 class="section-title">Код Двубои</h2>
        <p style="color: #94a3b8; margin-bottom: 2rem;">
            Състезавайте се с други програмисти в реално време и изпробвайте
            уменията си
        </p>

        <div class="search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" class="search-input" id="duelSearch" placeholder="Търси двубои...">
        </div>

        <div class="filter-container">
            <button class="filter-btn active" data-filter="all">Всички</button>
            <button class="filter-btn" data-filter="active">Активни</button>
            <button class="filter-btn" data-filter="upcoming">Предстоящи</button>
        </div>
    </section>

    <section class="duels-grid" id="duelsGrid">
        <!-- Duel 1 -->
        <div class="duel-card" data-status="active">
            <div class="duel-header">
                <h3 class="duel-title">Създаване на REST API</h3>
                <span class="duel-timer"><i class="fas fa-clock"></i> 25:14</span>
            </div>
            <p class="duel-problem">
                Създайте REST API с 3 endpoints за управление на продукти. Използвайте избрания от
                вас език и framework. Оценява се кодовата структура, ефективност и използване на best practices.
            </p>
            <span class="duel-status active">Активен</span>
            <a href="#" class="btn btn-secondary" style="width: 100%; margin-top: 1rem;">
                <i class="fas fa-flag"></i> Започни двубой
            </a>
        </div>

        <!-- Duel 2 -->
        <div class="duel-card" data-status="active">
            <div class="duel-header">
                <h3 class="duel-title">Сортиране на масив</h3>
                <span class="duel-timer"><i class="fas fa-clock"></i> 15:42</span>
            </div>
            <p class="duel-problem">
                Имплементирайте алгоритъм за сортиране на масив от числа. Оценява се времевата
                сложност, използваната памет и четливост на кода. Допуска се използване на всеки език за
                програмиране.
            </p>
            <span class="duel-status active">Активен</span>
            <a href="#" class="btn btn-secondary" style="width: 100%; margin-top: 1rem;">
                <i class="fas fa-flag"></i> Започни двубой
            </a>
        </div>

        <!-- Duel 3 -->
        <div class="duel-card" data-status="upcoming">
            <div class="duel-header">
                <h3 class="duel-title">Оптимизация на алгоритъм</h3>
                <span class="duel-timer upcoming"><i class="fas fa-clock"></i> Започва след 2 часа</span>
            </div>
            <p class="duel-problem">
                Оптимизирайте алгоритъм за търсене в граф. Оценява се ефективността и използването
                на подходящи структури от данни.
            </p>
            <span class="duel-status upcoming">Предстоящ</span>
            <a href="#" class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
                <i class="fas fa-bell"></i> Регистрирай се
            </a>
        </div>

        <!-- Duel 4 -->
        <div class="duel-card" data-status="upcoming">
            <div class="duel-header">
                <h3 class="duel-title">Динамично програмиране</h3>
                <span class="duel-timer upcoming"><i class="fas fa-clock"></i> Започва след 4 часа</span>
            </div>
            <p class="duel-problem">
                Решете задача за раницата с динамично програмиране. Оценява се коректността и
                оптимизацията на решението.
            </p>
            <span class="duel-status upcoming">Предстоящ</span>
            <a href="#" class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
                <i class="fas fa-bell"></i> Регистрирай се
            </a>
        </div>
    </section>

    <!-- Modal -->
    <div class="modal" id="duelModal">
        <div class="modal-content">
            <button class="modal-close" id="modalClose"><i class="fas fa-times"></i></button>
            <h3 class="modal-title" id="modalTitle"></h3>
            <p class="modal-problem" id="modalProblem"></p>
            <div class="modal-meta">
                <span id="modalTimer"><i class="fas fa-clock"></i></span>
                <span id="modalStatus" class="duel-status"></span>
            </div>
            <div class="modal-details">
                <h3>Правила и изисквания</h3>
                <ul id="modalRules"></ul>
            </div>
            <div class="modal-participants">
                <h3>Участници</h3>
                <div id="modalParticipants" class="duel-participants">
                    <div class="participant">
                        <img src="https://via.placeholder.com/60x60?text=You" alt="You" class="participant-avatar">
                        <p class="participant-name">Вие</p>
                        <p class="participant-points">В очакване на опонент...</p>
                    </div>
                    <div class="vs">VS</div>
                    <div class="participant">
                        <img src="https://via.placeholder.com/60x60?text=Searching" alt="Searching"
                             class="participant-avatar">
                        <p class="participant-name">Търсене на опонент</p>
                        <p class="participant-points">Моля, изчакайте...</p>
                    </div>
                </div>
            </div>
            <a href="#" class="btn" id="modalAction" style="width: 100%;"></a>
        </div>
    </div>
</main>
<script type="text/javascript">
    var gk_isXlsx = false;
    var gk_xlsxFileLookup = {};
    var gk_fileData = {};

    function filledCell(cell) {
        return cell !== '' && cell != null;
    }

    function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], {type: 'base64'});
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, {header: 1, blankrows: false, defval: ''});
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                    row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                    headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, {header: 1});
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
    }
</script>

