<main class="auth-section">
    <div class="auth-container">
        <div class="auth-tabs">
            <div class="auth-tab active" data-tab="login">Вход</div>
            <a href="Account/Register" style="text-decoration: none" class="auth-tab" data-tab="register">Регистрация</a>
        </div>

        <!-- Login Form -->
        <form class="auth-form active" method="post" action="/Account/Login">
            <div id="status-message" class="status-message" style="display: none;"></div>

            <div class="form-group">
                <input type="email" id="email" name="email" class="form-control" autocomplete="email" aria-required="true"
                       placeholder="Email" required />
                <span class="text-danger" id="email-error"></span>
            </div>
            <div class="form-group">
                <input type="password" id="password" name="password" autocomplete="current-password"
                       aria-required="true" placeholder="Password" required />
                <span class="text-danger" id="password-error"></span>
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <input type="checkbox" id="rememberMe" name="rememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                </label>
            </div>
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-sign-in-alt"></i> Вход
            </button>
            <div class="auth-links">
                <a href="Account/ForgotPassword">Забравена парола?</a>
            </div>
        </form>
    </div>
</main>
<script type="text/javascript">
    var gk_isXlsx = false;
    var gk_xlsxFileLookup = {};
    var gk_fileData = {};

    function filledCell(cell) {
        return cell !== '' && cell != null;
    }

    function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], {type: 'base64'});
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, {header: 1, blankrows: false, defval: ''});
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                    row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                    headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, {header: 1});
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
    }
</script>