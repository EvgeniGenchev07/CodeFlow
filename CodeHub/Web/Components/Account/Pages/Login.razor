@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BusinessLayer;

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<main class="auth-section">
    <div class="auth-container">
        <div class="auth-tabs">
            <div class="auth-tab active" data-tab="login">Вход</div>
            <a href="Account/Register" style="text-decoration: none" class="auth-tab"
               data-tab="register">Регистрация</a>
        </div>

        <!-- Login Form -->
        <EditForm Model="Input" class="auth-form active" method="post" OnValidSubmit="LoginUser" FormName="login">
            <StatusMessage Message="@errorMessage"/>
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-group">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true"
                           placeholder="Email"/>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-group">
                <InputText type="password" @bind-Value="Input.Password" autocomplete="current-password"
                           aria-required="true" placeholder="Password"/>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                    Remember me
                </label>
            </div>
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-sign-in-alt"></i> Вход
            </button>
            <div class="auth-links">
                <a href="Account/ForgotPassword">Забравена парола?</a>
            </div>
        </EditForm>
    </div>
</main>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private bool Registered { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Registered)
        {
            errorMessage = "Registration successful! Please log in with your credentials.";
        }

        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        try
        {
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                var redirectUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
                
                // In interactive mode, we need to use NavigationManager
                NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
            }
            else if (result.RequiresTwoFactor)
            {
                var redirectUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
                NavigationManager.NavigateTo($"/Account/LoginWith2fa?returnUrl={Uri.EscapeDataString(redirectUrl)}&rememberMe={Input.RememberMe}", forceLoad: true);
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                NavigationManager.NavigateTo("/Account/Lockout", forceLoad: true);
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error during login");
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }
}
