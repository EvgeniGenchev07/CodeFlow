@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using BusinessLayer
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<PageTitle>Register</PageTitle>

<main class="auth-section">
    <div class="auth-container">
        <div class="auth-tabs">
            <a href="Account/Login" class="auth-tab" data-tab="login">Вход</a>
            <div class="auth-tab active" data-tab="register">Регистрация</div>
        </div>

        <StatusMessage Message="@Message" />
        <EditForm Model="Input" method="post" class="auth-form active" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-group">
                <InputText @bind-Value="Input.FullName" class="form-control" autocomplete="name" aria-required="true" placeholder="Full Name" />
                <ValidationMessage For="() => Input.FullName" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm Password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-user-plus"></i> Регистрация
            </button>
        </EditForm>
    </div>
</main>

@code {
    private string? Message { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task RegisterUser()
    {
        try
        {
            if (Input.Password != Input.ConfirmPassword)
            {
                Message = "The password and confirmation password do not match.";
                return;
            }

            var user = new User
                {
                    UserName = Input.Email,
                    Email = Input.Email,
                    FullName = Input.FullName,
                    Points = 0,
                    Level = 1
                };

            var result = await UserManager.CreateAsync(user, Input.Password);

            if (result.Succeeded)
            {
                Logger.LogInformation("User created a new account.");
                //NavigationManager.NavigateTo('/Account/');
            }
            else
            {
                Message = string.Join("; ", result.Errors.Select(e => e.Description));
                Logger.LogWarning("User creation failed: {Errors}", Message);
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error during registration");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
        [Display(Name = "Full Name")]
        public string FullName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}