<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeBattle Admin - Упражнения</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin_exercises.css" />
</head>
<body>
    <!-- Header -->
    <header>
        <div class="logo">
            <span class="logo-icon"><i class="fas fa-code"></i></span>
            <span class="logo-text">CodeBattle <span class="admin-badge">ADMIN</span></span>
        </div>

        <button class="hamburger" id="hamburger">
            <i class="fas fa-bars"></i>
        </button>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav" id="admin-nav">
        <ul class="admin-nav-links">
            <li><a href="#"><i class="fas fa-tachometer-alt"></i> Табло</a></li>
            <li><a href="#battles"><i class="fas fa-trophy"></i> Двубои</a></li>
            <li><a href="#courses"><i class="fas fa-graduation-cap"></i> Курсове</a></li>
            <li><a href="#exercises" class="active"><i class="fas fa-dumbbell"></i> Упражнения</a></li>
            <li><a href="#forums"><i class="fas fa-comments"></i> Форуми</a></li>
            <li><a href="#users"><i class="fas fa-users"></i> Потребители</a></li>
            <li><a href="#settings"><i class="fas fa-cog"></i> Настройки</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <!-- Content -->
        <div class="admin-content">
            <section id="exercises">
                <div class="admin-header">
                    <h1 class="admin-title">Упражнения</h1>
                    <div class="button-group">
                        <button class="btn btn-primary" id="createExerciseBtn"><i class="fas fa-plus"></i> Ново упражнение</button>
                    </div>
                </div>

                <!-- Search and Filter -->
                <div class="search-filter-container">
                    <div class="search-box">
                        <input type="text" id="searchInput" placeholder="Търсене по заглавие...">
                        <button class="btn btn-primary" id="searchBtn"><i class="fas fa-search"></i></button>
                    </div>
                    <div class="filter-box">
                        <select class="form-control" id="categoryFilter">
                            <option value="">Всички категории</option>
                            <option value="Js">JavaScript</option>
                            <option value="Algorithms">Алгоритми</option>
                            <option value="Csharp">C#</option>
                            <option value="Python">Python</option>
                            <option value="Java">Java</option>
                            <option value="C">C</option>
                            <option value="CPlusPlus">C++</option>
                            <option value="Ruby">Ruby</option>
                            <option value="Go">Go</option>
                            <option value="Rust">Rust</option>
                            <option value="Swift">Swift</option>
                            <option value="Projects">Проекти</option>
                            <option value="Interviews">Интервюта</option>
                            <option value="Asynchronous">Асинхронност</option>
                            <option value="Synchronous">Синхронност</option>
                            <option value="DOMAssembly">DOM/Assembly</option>
                        </select>
                        <select class="form-control" id="difficultyFilter">
                            <option value="All">Всички трудности</option>
                            <option value="Easy">Лесно</option>
                            <option value="Intermidiate">Средно</option>
                            <option value="Hard">Трудно</option>
                            <option value="Extreme">Екстремно</option>
                            <option value="Insane">Безумно</option>
                            <option value="HardenBeard">Твърдо</option>
                        </select>
                    </div>
                </div>

                <!-- Exercises Table -->
                <div class="table-container">
                    <table class="exercises-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Заглавие</th>
                                <th>Точки</th>
                                <th>Трудност</th>
                                <th>Дата на създаване</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody id="exercisesTableBody">
                            <!-- Упражненията ще се зареждат тук чрез JavaScript -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="pagination-container">
                    <ul class="pagination" id="pagination">
                        <!-- Пагинацията ще се генерира тук -->
                    </ul>
                </div>
            </section>
        </div>
    </main>

    <!-- Add/Edit Exercise Modal -->
    <div class="modal" id="exerciseModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalExerciseTitle">Създаване на ново упражнение</h3>
                <button class="close-modal" id="closeExerciseModal">&times;</button>
            </div>
            <form id="exerciseForm">
                <input type="hidden" id="exerciseId">
                <div class="form-group">
                    <label class="form-label">Заглавие</label>
                    <input type="text" class="form-control" id="exerciseTitle" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Описание</label>
                    <textarea class="form-control" id="exerciseDescription" rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Начален код</label>
                    <textarea class="form-control" id="exerciseStarterCode" rows="6"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Решение</label>
                    <textarea class="form-control" id="exerciseSolution" rows="6"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Категория</label>
                    <select class="form-control" id="exerciseCategory" required>
                        <option value="">Избери категория</option>
                        <option value="Js">JavaScript</option>
                        <option value="Algorithms">Алгоритми</option>
                        <option value="Csharp">C#</option>
                        <option value="Python">Python</option>
                        <option value="Java">Java</option>
                        <option value="C">C</option>
                        <option value="CPlusPlus">C++</option>
                        <option value="Ruby">Ruby</option>
                        <option value="Go">Go</option>
                        <option value="Rust">Rust</option>
                        <option value="Swift">Swift</option>
                        <option value="Projects">Проекти</option>
                        <option value="Interviews">Интервюта</option>
                        <option value="Asynchronous">Асинхронност</option>
                        <option value="Synchronous">Синхронност</option>
                        <option value="DOMAssembly">DOM/Assembly</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Трудност</label>
                    <select class="form-control" id="exerciseDifficulty" required>
                        <option value="">Избери трудност</option>
                        <option value="Easy">Лесно</option>
                        <option value="Intermidiate">Средно</option>
                        <option value="Hard">Трудно</option>
                        <option value="Extreme">Екстремно</option>
                        <option value="Insane">Безумно</option>
                        <option value="HardenBeard">Твърдо</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Точки</label>
                    <input type="number" class="form-control" id="exercisePoints" min="1" required>
                </div>
                <div class="form-footer">
                    <button type="button" class="btn btn-outline" id="cancelExercise">Отказ</button>
                    <button type="submit" class="btn btn-primary" id="saveExerciseBtn">Запази</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Потвърждение за изтриване</h3>
                <button class="close-modal" id="closeDeleteModal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Сигурни ли сте, че искате да изтриете това упражнение? Това действие е необратимо.</p>
                <input type="hidden" id="deleteExerciseId">
            </div>
            <div class="form-footer">
                <button type="button" class="btn btn-outline" id="cancelDelete">Отказ</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Изтрий</button>
            </div>
        </div>
    </div>

    <script>
        // Array to store exercises from the database
        let exercises = [];

        // Pagination configuration
        let currentPage = 1;
        const itemsPerPage = 10;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Hamburger menu toggle
            const hamburger = document.getElementById('hamburger');
            const adminNav = document.getElementById('admin-nav');

            hamburger.addEventListener('click', function() {
                adminNav.classList.toggle('active');
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            });

            // Close menu when clicking outside
            document.addEventListener('click', function(event) {
                if (!adminNav.contains(event.target) && !hamburger.contains(event.target)) {
                    adminNav.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            // Modal event listeners
            document.getElementById('createExerciseBtn').addEventListener('click', openCreateModal);
            document.getElementById('closeExerciseModal').addEventListener('click', closeExerciseModal);
            document.getElementById('cancelExercise').addEventListener('click', closeExerciseModal);

            // Form submission
            document.getElementById('exerciseForm').addEventListener('submit', createExercise);

            // Search and filter events
            document.getElementById('searchBtn').addEventListener('click', applyFilters);
            document.getElementById('categoryFilter').addEventListener('change', applyFilters);
            document.getElementById('difficultyFilter').addEventListener('change', applyFilters);

            // Initial load of exercises
            loadExercises();
        });

        // Load exercises from API
        async function loadExercises() {
            try {
                showLoadingState();

                const response = await fetch('/Admin/GetAllExercises');

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                exercises = Array.isArray(data) ? data : [];

                updateExercisesTable();
            } catch (error) {
                handleLoadError(error);
            }
        }

        function showLoadingState() {
            document.getElementById('exercisesTableBody').innerHTML =
                '<tr><td colspan="6" class="text-center">Зареждане на упражнения...</td></tr>';
        }

        function handleLoadError(error) {
            console.error('Error loading exercises:', error);
            exercises = [];

            document.getElementById('exercisesTableBody').innerHTML =
                '<tr><td colspan="6" class="text-center text-danger">' +
                'Грешка при зареждане на упражнения: ' +
                (error.message || 'Неочаквана грешка') +
                '</td></tr>';

            renderPagination(Math.ceil(exercises.length / itemsPerPage));
        }

        // Apply search and filters
        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const difficultyFilter = document.getElementById('difficultyFilter').value;

            currentPage = 1;
            updateExercisesTable();
        }

        // Update exercises table
        function updateExercisesTable() {
            const tableBody = document.getElementById('exercisesTableBody');
            const pagination = document.getElementById('pagination');

            // Ensure exercises is an array
            exercises = exercises || [];

            // Apply filters
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const difficultyFilter = document.getElementById('difficultyFilter').value;

            let filteredExercises = exercises.filter(exercise => {
                const matchesSearch = exercise.title.toLowerCase().includes(searchTerm);
                const matchesCategory = !categoryFilter || exercise.category === categoryFilter;
                const matchesDifficulty = difficultyFilter === 'All' || exercise.difficulty === difficultyFilter;

                return matchesSearch && matchesCategory && matchesDifficulty;
            });

            const totalPages = Math.ceil(filteredExercises.length / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, filteredExercises.length);
            const currentExercises = filteredExercises.slice(startIndex, endIndex);

            tableBody.innerHTML = '';

            if (filteredExercises.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center">Няма налични упражнения</td></tr>';
                renderPagination(totalPages);
                return;
            }

            currentExercises.forEach(exercise => {
                const row = createExerciseRow(exercise);
                tableBody.appendChild(row);
            });

            renderPagination(totalPages);
        }

        function createExerciseRow(exercise) {
            const row = document.createElement('tr');

            // Safely get exercise properties with fallbacks
            const exerciseId = exercise?.id || 'N/A';
            const title = exercise?.title || 'Без заглавие';
            const points = exercise?.points || 0;
            const difficulty = exercise?.difficulty || 'Easy';
            const formattedDate = formatExerciseDate(exercise?.createdAt);

            row.innerHTML = `
                <td>${exerciseId}</td>
                <td>${title}</td>
                <td>${points}</td>
                <td class="difficulty-${difficulty.toLowerCase()}">
                    ${getDifficultyText(difficulty)}
                </td>
                <td>${formattedDate}</td>
                <td class="actions">
                    <button class="btn btn-primary btn-sm" onclick="editExercise(${exerciseId})">
                        <i class="fas fa-edit"></i> Редактирай
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="confirmDelete(${exerciseId})">
                        <i class="fas fa-trash"></i> Изтрий
                    </button>
                </td>
            `;

            return row;
        }

        // Helper functions
        function getDifficultyText(difficulty) {
            const difficultyMap = {
                'Easy': 'Лесно',
                'Intermidiate': 'Средно',
                'Hard': 'Трудно',
                'Extreme': 'Екстремно',
                'Insane': 'Безумно',
                'HardenBeard': 'Твърдо'
            };
            return difficultyMap[difficulty] || difficulty;
        }

        function formatExerciseDate(dateString) {
            if (!dateString) return 'N/A';

            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('bg-BG', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
            } catch {
                return 'N/A';
            }
        }

        // Pagination functions
        function renderPagination(totalPages) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            if (totalPages <= 1) return;

            // Previous button
            addPaginationItem(pagination, 'prev', currentPage > 1, () => changePage(currentPage - 1));

            // Page numbers
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            // First page and ellipsis
            if (startPage > 1) {
                addPaginationItem(pagination, '1', true, () => changePage(1));
                if (startPage > 2) {
                    addPaginationItem(pagination, '...', false);
                }
            }

            // Middle pages
            for (let i = startPage; i <= endPage; i++) {
                addPaginationItem(pagination, i.toString(), true, () => changePage(i), i === currentPage);
            }

            // Last page and ellipsis
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    addPaginationItem(pagination, '...', false);
                }
                addPaginationItem(pagination, totalPages.toString(), true, () => changePage(totalPages));
            }

            // Next button
            addPaginationItem(pagination, 'next', currentPage < totalPages, () => changePage(currentPage + 1));
        }

        function addPaginationItem(container, content, enabled, onClick = null, isActive = false) {
            const item = document.createElement('li');
            item.className = 'page-item';

            const isPrev = content === 'prev';
            const isNext = content === 'next';

            if (isPrev || isNext) {
                item.innerHTML = `
                    <a href="#" class="page-link ${enabled ? '' : 'disabled'}"
                       onclick="${enabled ? `changePage(${currentPage + (isNext ? 1 : -1)});` : ''} return false;">
                        <i class="fas fa-chevron-${isPrev ? 'left' : 'right'}"></i>
                    </a>
                `;
            } else {
                item.innerHTML = `
                    <a href="#" class="page-link ${isActive ? 'active' : ''}"
                       onclick="${onClick ? 'changePage(' + content + ');' : ''} return false;">
                        ${content}
                    </a>
                `;
            }

            container.appendChild(item);
        }

        function changePage(page) {
            currentPage = page;
            updateExercisesTable();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Modal functions
        function openCreateModal() {
            document.getElementById('modalExerciseTitle').textContent = 'Създаване на ново упражнение';
            document.getElementById('exerciseForm').reset();
            document.getElementById('exerciseModal').classList.add('active');
        }

        function closeExerciseModal() {
            document.getElementById('exerciseModal').classList.remove('active');
        }

        // Create exercise function
        async function createExercise(e) {
            e.preventDefault();

            const form = e.target;
            const exerciseData = {
                Title: form.exerciseTitle.value.trim(),
                Description: form.exerciseDescription.value.trim(),
                StarterCode: form.exerciseStarterCode.value.trim(),
                Solution: form.exerciseSolution.value.trim(),
                Category: form.exerciseCategory.value,
                Difficulty: form.exerciseDifficulty.value,
                Points: parseInt(form.exercisePoints.value) || 1
            };

            // Client-side validation
            if (!validateExerciseData(exerciseData)) {
                return;
            }

            try {
                const response = await fetch('/api/exercises/CreateExercise', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(exerciseData)
                });

                if (!response.ok) {
                    const errorResult = await response.json();
                    throw new Error(errorResult.message || response.statusText);
                }

                const result = await response.json();

                closeExerciseModal();
                alert(result.message || 'Упражнението е създадено успешно!');
                await loadExercises();

            } catch (error) {
                handleCreateError(error);
            }
        }

        function validateExerciseData(data) {
            if (!data.Title) {
                alert('Заглавието на упражнението е задължително!');
                return false;
            }

            if (!data.Description) {
                alert('Описанието на упражнението е задължително!');
                return false;
            }

            if (!data.Category) {
                alert('Категорията на упражнението е задължителна!');
                return false;
            }

            if (!data.Difficulty) {
                alert('Трудността на упражнението е задължителна!');
                return false;
            }

            if (!data.Points || data.Points < 1) {
                alert('Точките трябва да са поне 1!');
                return false;
            }

            return true;
        }

        function handleCreateError(error) {
            console.error('Грешка при създаване на упражнение:', error);
            alert('Грешка при създаване на упражнение: ' +
                 (error.message || 'Моля, опитайте отново по-късно'));
        }

        // Edit exercise function
        function editExercise(id) {
            const exercise = exercises.find(e => e.id === id);
            if (!exercise) {
                alert('Упражнението не е намерено!');
                return;
            }

            document.getElementById('modalExerciseTitle').textContent = 'Редактиране на упражнение';
            document.getElementById('exerciseId').value = exercise.id;
            document.getElementById('exerciseTitle').value = exercise.title;
            document.getElementById('exerciseDescription').value = exercise.description;
            document.getElementById('exerciseStarterCode').value = exercise.starterCode || '';
            document.getElementById('exerciseSolution').value = exercise.solution || '';
            document.getElementById('exerciseCategory').value = exercise.category;
            document.getElementById('exerciseDifficulty').value = exercise.difficulty;
            document.getElementById('exercisePoints').value = exercise.points;

            document.getElementById('exerciseModal').classList.add('active');
        }

        // Delete exercise function
        function confirmDelete(id) {
            document.getElementById('deleteExerciseId').value = id;
            document.getElementById('deleteModal').classList.add('active');
        }

        async function deleteExercise() {
            const id = document.getElementById('deleteExerciseId').value;

            try {
                const response = await fetch(`/api/exercises/DeleteExercise/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                alert('Упражнението е изтрито успешно!');
                document.getElementById('deleteModal').classList.remove('active');
                await loadExercises();
            } catch (error) {
                console.error('Грешка при изтриване на упражнение:', error);
                alert('Грешка при изтриване на упражнение: ' + error.message);
            }
        }

        // Initialize delete modal buttons
        document.getElementById('confirmDelete').addEventListener('click', deleteExercise);
        document.getElementById('cancelDelete').addEventListener('click', function() {
            document.getElementById('deleteModal').classList.remove('active');
        });
        document.getElementById('closeDeleteModal').addEventListener('click', function() {
            document.getElementById('deleteModal').classList.remove('active');
        });
    </script>
</body>
</html>